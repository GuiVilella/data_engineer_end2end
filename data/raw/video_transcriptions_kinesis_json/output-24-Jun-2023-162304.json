{"data": "{\"value\":\"0.0 Hey guys, welcome to a new Python tutorial.2.542.54 Today I want to show you how you can get started with Flask.6.02000000000000056.0200000000000005 We will write a simple to-do app to manage tasks.9.5400000000000019.540000000000001 So you will learn how to install and use Flask,12.6612.66 how to handle different routes,15.015.0 how to use a database,16.6416.64 and also a little bit how we can style our app at the end.20.220.2 So if you don't know Flask,22.40000000000000222.400000000000002 Flask is one of the most popular web frameworks in Python.26.40000000000000226.4 What's nice about Flask is that it's a lightweight framework,30.11999999999999730.119999999999997 so it allows us to get started quick and easy.33.533.5 You will see in a minute how easy it is to set up our first app.38.4838.48 But with Flask, it's also possible to write very complex web apps.43.48000000000000443.480000000000004 So yeah, it's really great.45.5645.56 Now, before we get started,47.5647.56 let me show you the final app first.49.9449.94 The final app looks like this.52.1652.16 Here we have our to-do app,53.9253.92 and here we have our list of to-do items.56.8856.88 So I already added one.59.059.0 Then here up here,60.660.6 we can add another to-do item.63.04000000000000663.040000000000006 So for example, simply say to do two and then click on Add,68.068.0 and this will add the item to the list,71.471.4 and then we see a status not complete,74.774.7 and then we can click on Update,76.7676.76 and this will change it to complete it.79.1679.16 Then if we click Update again,81.0481.04 it will change back to not complete.83.4883.48 Of course, we can delete items again.86.3200000000000186.32000000000001 So yeah, so that's the app we're going to implement.89.7689.76 Now let's get started.91.6491.64 So let me stop this app here first.95.8000000000000195.80000000000001 So now let's create a new empty directory.100.36100.36 So let's call this flask-to-do,103.96000000000001103.96000000000001 and then let's go into this directory,107.0107.0 flask-to-do, and then let's open my editor.112.64112.64 So I'm using Visual Studio Code.116.6118.96000000000001 Here, we can use the integrated terminal,124.72124.72 and now we go to the official website,129.08129.08 so the official flask website,130.92000000000002130.92000000000002 and follow the installation guide.133.12133.12 So it's not too complicated.136.08136.08 The first thing we want to do is to create a virtual environment.141.24141.24 So it's always recommended to use this.144.24144.24 So I'm grabbing this command,146.8146.8 and if you're on Windows,148.28148.28 it's slightly different,149.60000000000002149.60000000000002 so you have to use this syntax.151.96151.96 Then let's paste this and create our environment.156.64000000000001156.64000000000001 So this will take a few seconds,160.04000000000002160.04000000000002 and now it's done.161.84161.84 So now if we go back,163.52163.52 the next thing we want to do is we want to activate our environment.167.60000000000002167.60000000000002 So I'm using this command.169.56169.56 Again, if you're on Windows,171.24171.24 then you have to use this command.173.6173.6 So paste the actuate command in here.177.16177.16 So now our environment is actuated,179.52179.52 and we can see this because we see181.44181.44 the name of our environment in the beginning.185.2185.2 Now, we want to install flask.188.76188.76 So we say pip install flask,193.16194.48000000000002 and this will take a few seconds.198.64000000000001198.64 So now it's installed.201.67999999999998201.67999999999998 So now we can start using it.203.6203.6 So now let's create a new file.207.11999999999998207.11999999999998 So let's call this app.py.210.95999999999998210.95999999999998 Here we say from flask import flask,218.27999999999997218.27999999999997 and then we create an app equals flask,223.2223.2 and this has to get underscore name.227.04227.04 So this is just a convention.229.0229.0 Now, what we want to do is we also want to define the index page first.235.56235.56 So define index, and here for this example,240.16240.16 we simply return a string, hello world.244.2244.2 Now for each page or each route,247.68247.68 we have to decorate this by saying app.route,252.79999999999998252.79999999999998 and then here we specify the URL.256.4256.4 So for this, it's just a forward slash.259.03999999999996259.03999999999996 So this is our index page.261.59999999999997261.59999999999997 So now, this is all the code we need to have a first app.269.56269.56 So now let me show you how we can run this app.272.44272.44 So there are two ways.274.03999999999996274.03999999999996 The first thing, for this,276.4276.4 we have to set some environment variables.280.03999999999996280.03999999999996 So we have to say export,283.15999999999997283.16 and then we say flask app,287.6287.6 flask underscore app equals and then our file name app.py.294.32000000000005294.32000000000005 I also want to set the flask environment by saying flask and equals development.302.92302.92 So this makes it easier during implementation,306.52000000000004306.52000000000004 because then we don't have to restart our server each time we modify the files.312.24312.24 So we also set this environment,315.76315.76 and then we can say flask run.319.32319.32 Then it says serving our flask app,323.04323.04 it's running here at localhost port 5000.326.88326.88 So if we go to this URL,331.2331.2 then we see it shows hello world.334.40000000000003334.40000000000003 So this is what we specified for the index page.337.92337.92 Now we have our first app up and running.342.16342.16 So this is the first way to start it.344.76344.76 So now if I hit Ctrl and C,347.96000000000004347.96000000000004 then it will stop the server again.351.28000000000003351.28000000000003 So the second way to do it is to say,355.32355.32 if name equals equals double underscore main,362.12362.12 sorry, this was auto-complete.364.42364.42 Then we simply say app.run and we set debug equals true.372.40000000000003372.40000000000003 So we are in development mode.375.44375.44 And then in our environment,377.88377.88 we start our script like we start every Python script by saying python app.py.385.56385.56 And this will do the same thing.387.32387.32 So now again, if we go to this,390.44390.44 or else to our local host, then we have our app here up and running.398.04398.04 So yeah, so now if we want to add different sites,403.56403.56 so for each site or URL,406.72406.72 we have to add a new function.409.8409.8 So let's, for example,411.18411.18 show an about page.413.0413.0 So we define our method about,416.0416.0 and here we return about,419.32419.32 and then we specify the route is at forward slash about.424.7424.7 Now if we hit save,426.4426.4 then it's restarting our server.428.96428.96 And now if we go to the index page,431.8431.8 we see the same thing.433.56433.56 And now we can also go to slash about,437.52437.52 and then we get the about string.440.78440.78 So this is how we define different URLs for our web app.446.71999999999997446.72 And now of course, we don't simply want to return a string here.451.68451.68 So the common way to do this is to render a template here.457.04457.04 So we say from flask,459.08000000000004459.08000000000004 import render template.461.8461.8 And then let me remove this one.465.08000000000004465.08000000000004 Then we want to return this template.468.6468.6 So we say return render template,472.84000000000003472.84000000000003 then the name of our file.475.04475.04 So we call this base dot html.479.08000000000004479.08000000000004 And of course, we have to create this.482.76000000000005482.76000000000005 So in our top folder,485.48485.48 we create a new directory and call this templates.489.56489.56 So this has to be this name because flask is looking for the templates directory.495.16495.16 Then inside this directory,497.56497.56 we create our file based of html.501.54501.54 And here we can write some html code.504.68504.68 So some boilerplate.507.0507.0 And let's give this a title to do app.512.16512.16 And then let's simply for now at an h1 tag and say also to do app.520.04520.04 And now if we reload this,523.48523.48 so I'm saving the file,525.12525.12 then this should be should reload.527.44527.44 So now if we go back to our index page and hit enter,531.92531.92 then we see that it's rendering this template.534.8534.8 So it's showing our h1 tag.537.76537.76 So this is working.540.16540.16 And now we can, for example,543.0799999999999543.0799999999999 continue to implement our html.546.68546.68 So for example, if you have a look at the final app up here,550.88550.88 we want to have a form to enter a new to do item.555.12555.12 So let's do this.557.0557.0 So in our base html,560.9599999999999560.96 let's add a form.563.36563.36 And for now, I will leave the action blank.567.0400000000001567.0400000000001 So I will explain this in a second.570.2800000000001570.2800000000001 So our form first,572.6572.6 let's add a div tag.574.84574.84 Then our form should have a label for,580.44580.44 let's call this title.583.64583.64 And then the label says to do title.588.2800000000001588.28 Then we want to have a input.591.68591.68 And this is of type texts.594.8594.8 Then it also should get a name equals title.602.04602.04 And it also has to or should have a placeholder enter to do dot dot dot.609.36609.36 And we also want to have a button here.612.92612.92 And the button says ads.615.56615.56 And this should test type equals submit.621.8399999999999621.8399999999999 So sorry, and quotes submit.626.4799999999999626.4799999999999 So when we click on the button,628.8628.8 then it should submit the form.631.76631.76 So now if we save this and reload our app again,638.16638.16 then we see we have our form here.644.4644.4 So let me add a quick change.646.9599999999999646.9599999999999 So let's add a new line for our buttons.651.28651.28 So let's add a br tag.654.72654.72 And then again,658.84658.84 if we reload the page,663.4663.4 then it should show the new HTML.666.28666.28 So this is working.667.52667.52 And now of course,668.96668.96 right now this button isn't doing anything.672.24672.24 So now the next thing we want to do is to add our database.678.96678.96 And for this, I want to stop the server again.683.24683.24 So for this, we have to install another module and this is called flask SQL alchemy.691.48691.48 So we say pip install flask dash SQL alchemy.700.0700.0 So I'm just checking if I didn't have a typo.703.28703.28 So yeah, should be fine.704.72704.72 And hit enter.706.2706.2 So this module makes it easy for us to work with SQL databases.712.12712.12 So now it's installed.714.04714.04 So now we can import this.716.24716.24 So we say from flask SQL alchemy,719.88719.88 we import SQL alchemy.723.96723.96 And then we create our app.728.44728.44 And now what we want to do or what we have to do is to set a config variable by saying735.6400000000001735.6400000000001 app dot config.738.36738.36 And this is a dictionary.739.8800000000001739.8800000000001 So this has to get a key and the key is called SQL.744.72744.72 SQL alchemy, all in capital letters underscore database underscore URI.754.74754.74 So this is the name or the path to our database.762.3762.3 And in this example, we are simply using a SQLite database for now.768.0768.0 So the syntax is SQLite, colon and three forward slashes.774.92774.92 This means that it's a relative path.778.12778.12 So in this directory here, and then we can give it the name we want.783.3783.3 So we call this DB dot SQLite.787.5799999999999787.5799999999999 So now we have a the path to the database.792.78792.78 Then I also want to set a second config variable and this is called SQL alchemy underscore801.66801.66 track modifications equals false.808.3199999999999808.3199999999999 So don't worry about this.810.3199999999999810.32 If you don't set this to false, and we will get a warning with the current flask version816.7800000000001816.7800000000001 so that this will be removed in the future anyway.820.44820.44 So I'm setting this.822.86822.86 So now I create or we create the actual database by saying DB equals SQL alchemy and this gets831.12831.12 the app.833.9200000000001833.92 And now, of course, before we run our code again, we also have to create our database842.88842.88 first.844.38844.38 So this we say DB dot create all.850.78850.78 And now if we run our code again, then this should work if we did everything correctly.858.52858.52 And then you will see that in our folder, this file DB dot SQLite should appear.865.88865.88 So let's run this.869.8869.8 And yeah, it worked.872.46872.46 So here's our database.874.86874.86 So now we can start working with this.877.86877.86 So inside our database, we want to have one model.884.1884.1 So we create a class for our to do items by saying class and let's call this to do.892.84892.84 And this has to inherit DB dot model.898.22898.22 And here we want to specify all the entries for this model in our database.904.82904.82 So our model has to have three things.908.14908.14 One is an ID for our item.911.1600000000001911.16 One is the title of the to do item to the task.916.3916.3 And then it also has a boolean value if it is completed or not.921.7199999999999921.7199999999999 So let's do this.922.7199999999999922.7199999999999 So we say ID equals DB dot column.927.68927.68 So for each entry, we create a column and for the column, we have to give it a data933.9399999999999933.9399999999999 type.934.9399999999999934.9399999999999 So in this case, it's a DB dot integer.939.52939.52 And for this, we also set primary key equals true.945.38945.38 This means we want to have a unique value for each to do item that we want to create.952.86952.86 And SQL alchemy automatically manage these managers these keys for us.959.9959.9 So we have the ID then we also want to add the title by saying DB dot column.966.34966.34 And in this case, this should be a string.970.34970.34 And this should also get a length of 100.974.7974.7 So the maximum possible characters that we can type in.980.22980.22 And then we also give it a tag complete equals DB dot column.987.38987.38 And this should be a boolean.989.14989.14 So DB dot boolean.993.14993.14 So now this is the complete class we need.997.34997.34 And for now for a simple for simple demonstration, let me create one here for you.1006.581006.58 So when we the next time, let me stop this again.1011.461011.46 And the next time we run our app here, it should create one new item.1017.641017.64 So we say new to do equals, and then we create our to do item and this gets the title equals.1032.221032.22 So for now, let's simply say to do one and complete equals false.1041.061041.06 Then we say DB dot session.1044.661044.66 So for the current session, we want to add our item.1050.421050.42 So we say add new to do.1054.381054.38 And we also have to commit this.1056.51056.5 So we say DB dot session dot commit.1062.30000000000021062.3000000000002 So now this should be added to our database.1066.62000000000011066.62 So now in our index page here, we want to show all to dues.1076.11076.1 So we want to query the database.1079.41999999999981079.4199999999998 So we say our to do list equals, and then we use to do dot query dot all, this will1089.97999999999981089.9799999999998 return a list of all the items.1092.781092.78 So for now, we simply print this.1096.51096.5 So now, let's run our app again.1102.081102.08 And now if we go to our homepage, again, and reload this, and then go back to the terminal,1112.521112.52 then we see we have the list of to do so I guess it's reloaded again.1122.61122.6 That's why we have two items here.1127.341127.34 So but we see that it works.1129.341129.34 So we added some items.1131.841131.84 So now let's delete this again.1135.21999999999981135.2199999999998 And let's so it's restarting.1140.41999999999981140.4199999999998 And then for example, if we hit enter on this page, again, we see we still have the items1147.63999999999991147.6399999999999 in our database.1150.11150.1 And now the next thing we want to do is we want to, of course, show these items.1157.37999999999991157.3799999999999 And we can do this by passing these items to our template.1163.17999999999981163.1799999999998 So we say we give this a parameter name and say to do list equals our to do list.1172.37999999999991172.38 And then inside our HTML, we can access these items.1181.78000000000021181.7800000000002 So this is called a ginger templating engine.1186.10000000000011186.1000000000001 So if we go back to the flask site, here on the front page, we see flask depends on the1194.661194.66 ginger template engine.1197.461197.46 So I will show you how this looks in a second.1202.581202.58 So inside our HTML, we can now use the special syntax.1209.021209.02 And this is a little bit similar to Python code, but not exactly like Python.1214.821214.82 So what we can do here, for example, is we have to use curly braces, and then percent,1222.421222.42 and then we can do a for loop like in Python, we can say for to do in to do list.1231.91231.9 And then we also have to end this.1235.141235.14 So somewhere we have to write and for and now this will do a for loop.1243.71243.7 And then for each to do item, we want to render it.1248.421248.42 So let's simply create a p tag.1252.10000000000011252.1000000000001 And here if you want to access the single to do item, we use double sorry, double curly1261.10000000000011261.1000000000001 braces.1262.181262.18 And then we can for example, say to do dot ID.1267.661267.66 And so we can access all the variables.1271.661271.66 So let's use this, let's use this as separator.1275.981275.98 And then for example, we also want to show the to do dot title.1283.421283.42 So now this should work.1285.421285.42 So if we go back to our app, and reload this, then we see this is working.1293.661293.66 So it the for loop is generating a p tag for each of the items.1300.381300.38 And we have two items right now in our list.1307.08000000000021307.0800000000002 So this is working.1309.10000000000011309.1000000000001 So now we also if we have a look at the final app, so we want to add the complete tag or1320.10000000000011320.1000000000001 complete or not complete, then the Update button and the delete button.1327.30000000000021327.3 So for this, let's go back to the HTML code.1332.581332.58 And then inside here, what we want to do is first we want to check if the to do is completed.1342.741342.74 So for this, we can, again, let's use curly braces, and then percent sign.1349.37999999999991349.38 And then we can use if sent if syntax, so we say, if to do dot complete, equals equals1362.82000000000021362.8200000000002 false.1364.221364.22 So again, this looks like Python code.1367.421367.42 If this is true, and then again, we somewhere have to define the end if, and we also can1377.181377.18 use we copy this again, we can use a else statement.1383.781383.78 And then so if this is not completed, then let's hear let's use a span and say not complete,1396.021396.02 then else, if it is completed, we say, come pleats or completed, then we have our end1407.141407.14 if.1408.741408.74 So now if we reload this, then this should show not completed for each of the items.1415.62000000000011415.6200000000001 So yeah, this is working not complete.1418.261418.26 Yeah, not complete, not completed.1422.181422.18 Doesn't matter.1424.82000000000021424.8200000000002 So this is working.1427.221427.22 So then let's add the update and delete button.1434.84000000000011434.84 So for this, we are using a a tag.1439.021439.02 So and I will leave the href blank for now.1445.89999999999991445.8999999999999 So again, I will explain this in a second how this is working.1449.63999999999991449.6399999999999 So this is called update.1453.341453.34 And then here, let's use another one with by saying sorry, not at delete.1463.37999999999991463.38 And for now, you're simply so this has to get the URL, which our tag leads to.1471.51471.5 So for now, let's simply say this should go to our homepage again.1478.04000000000021478.0400000000002 So now if we reload this, then this is working, we see our to update and delete buttons.1485.51485.5 And if we click on this, then this is reloading the index page.1492.58000000000021492.58 So this is working.1495.461495.46 And now what is left to do is to add the actual functionality.1501.69999999999981501.6999999999998 Whenever we click on the Add button, the Update button or the delete button.1508.43999999999981508.4399999999998 So now for each of these operations, we want to add a route again.1514.621514.62 So let's define a function and call this at and here for now, let's say, pass.1522.541522.54 Or let's write a comment at new item.1530.37999999999991530.3799999999999 So here we are using Oh, I already deleted this.1534.621534.62 So let's have let's write this again.1537.65999999999991537.6599999999999 So let's say new to do equals to do.1544.781544.78 And then it will get that title.1549.11549.1 So title equals.1551.581551.58 So first, we have to get the title and we get the title from the form.1558.461558.46 And so we get this, we have a look, we get this from this input field with the name title.1568.781568.78 So let's say title equals re quest dot form dot get and then the name of this form is1581.561581.56 title.1583.241583.24 So we also have to import request from flask.1589.821589.82 And now it stopped my server because it detected this syntax error here.1596.741596.74 So it doesn't matter for now.1598.661598.66 So now we get the title.1600.62000000000011600.6200000000001 So we put this into our to do item.1604.761604.76 And we say, complete equals false in the beginning, then we add this to our database.1613.481613.48 So we say DB dot session dot at our new to do, then we have to commit this by saying1622.661622.66 DB dot session dot commit.1626.181626.18 And then after we edit the new item, we want to refresh our index page.1634.941634.94 So for this, we also import two more things.1638.421638.42 So the one is called re direct, and the other one is called URL four.1648.541648.54 And then we want to re return the redirect, return re re direct, and then here URL four,1663.89999999999991663.8999999999999 and then it has to get the name of this function.1668.281668.28 So this is called index.1671.761671.76 So this will redirect the user to this page.1676.941676.94 And so because this should be a route that is never be shown.1681.461681.46 So this only has the purpose to add the new item and then redirect to this URL.1688.381688.38 But still, we have to define it as a route.1691.741691.74 So we have to say, or decorated by saying app dot route.1696.82000000000021696.8200000000002 And then here, we give it the URL.1700.381700.38 And this is slash at and then we also say methods, methods equals.1712.78000000000021712.7800000000002 And this is an array.1716.02000000000021716.0200000000002 And here we simply say post.1718.221718.22 So this should be a post method.1722.221722.22 So now if we go back to our base HTML, in our form, the action here should be the same1734.31734.3 route that we just defined.1736.62000000000011736.6200000000001 So here we say forward slash at so this is the action that happens.1742.10000000000011742.1000000000001 So this will execute this code here.1747.60000000000011747.6000000000001 So now the adding should already work.1751.81751.8 So now if we go back, and now if we hit a to do so let's say to do three.1758.89999999999991758.8999999999999 And now if we click Add, then this should add a new item and then redirect or refresh1764.621764.62 the homepage.1766.441766.44 So we still are we have an error here.1772.281772.28 So let's have a look.1774.13999999999991774.1399999999999 Oh, our sorry, of course, the last gap is not running.1778.21778.2 So we say, Python app dot pi.1783.981783.98 So now we don't get an error, this should looks good.1787.58000000000021787.5800000000002 So now go back to our homepage.1789.781789.78 And now let's try it again.1791.781791.78 So to do three and click on Add, then we get an error here.1801.221801.22 So oh, I think we also have to specify here that the method should be a post method.1811.381811.38 So now if we go back, and then enter a new to do three, and let's try again.1824.721824.72 So oh, I'm having a typo here.1829.541829.54 Let's check where is it?1831.341831.34 I think during the ads are in the ad methods at complete.1838.181838.18 So now one more time, let's go back to our index page, let's add a new to do and click1848.561848.56 on ads.1849.621849.62 And now it worked.1851.181851.18 So now we see or we know how we can add things.1854.681854.68 So now we still have to update and delete our things.1860.06000000000021860.0600000000002 So now this should be fairly easy.1862.06000000000021862.0600000000002 And now we know how we do this.1864.661864.66 So we define a new function, like, oh, let's copy this.1872.181872.18 Or no, let's better copy this.1876.82000000000021876.8200000000002 Sorry.1880.441880.44 Let's copy and paste this.1884.181884.18 And here, let's call this, this should be a at slash up dates.1893.31893.3 And then of course, we also have to know which which to do either and we want to update.1900.941900.94 So we use another slash, and then we can use this syntax, this is an integer, and then1909.71909.7 a colon, and then we call this to do ID.1915.62000000000011915.6200000000001 And we don't need this.1919.421919.42 And then let's call this update.1924.81924.8 And then inside this function, we want to query our database for this ID, and then modify1933.781933.78 the complete variable.1938.721938.72 So let's do this.1940.961940.96 So here, instead of adding this, what we want to do is we want to query our database.1949.561949.56 So we say our to do that we want to update equals to do dot query.1957.081957.08 And now we don't query all so but instead, we can use query dot fill, turn underscore1966.021966.02 by.1967.91967.9 And then here we say ID equal equals to do ID.1975.661975.66 And then only this should only return one.1979.41979.4 So we say first, so this is our to do.1983.641983.64 So now for our to do item, we want to set the to do dot complete equals to the opposite.1992.80000000000021992.8 So we say not to do dot complete.1998.21998.2 And then we commit this again and redirect to the homepage.2003.082003.08 So this is all we need here.2006.682006.68 And now as a last thing, we need this syntax to delete our item.2013.37999999999992013.38 So here we specify the route delete and then our ID and we call this delete.2023.62000000000012023.6200000000001 And here we do the same thing we query the database to get this item.2028.80000000000022028.8000000000002 And then we say DB DB dot session dot D lead our to do then we commit this and redirect2042.162042.16 to the homepage.2043.922043.92 So now we have these two routes.2047.922047.92 And now the only thing left to do is to go to this route when we click on the update2054.42054.4 or the delete button.2056.362056.36 So here, we say we go to update and then we go to slash and here, as I said, we want to2066.082066.08 give it the ID.2068.482068.48 So again, we use the templating syntax, like here, so double curly braces, and then the2077.162077.16 to do ID.2079.82079.8 And this theme, same thing for the delete button, but instead here, we are going to2087.562087.56 delete slash our to do ID.2090.74000000000022090.7400000000002 So this should work now.2092.422092.42 So let's refresh our page again.2097.642097.64 And then we will we get an error here.2102.27999999999972102.2799999999997 So now I just had to restart the server.2105.02105.0 So now if we click on update, and then we get an error update got an unexpected keyword2112.042112.04 argument to do ID.2114.79999999999972114.7999999999997 And this is because of course, I also have to add this as a parameter.2122.42122.4 So also to do ID, so the same thing is in the same name as we're using here, and here.2131.622131.62 And also our delete function has to get this parameter.2135.72000000000032135.7200000000003 So now, it should be fine.2138.842138.84 So now if we go to our homepage again, now if we click on update, then this should change2145.942145.94 to completed.2148.762148.76 So this is working, click Update again.2151.72000000000032151.72 Let's check this.2152.95999999999962152.9599999999996 So this is working.2154.642154.64 Let's click on Delete.2156.642156.64 So this is working the lead again, let's add another one to do four.2163.31999999999972163.3199999999997 And it's adding this.2165.162165.16 So this is working.2166.662166.66 So now we have all the functionality we need.2170.042170.04 And now the last thing we can do is to style our app a little bit.2174.122174.12 So for this, in this example, I want to use semantic UI.2178.042178.04 So this is really nice framework to rapidly add nice styling to our app.2185.922185.92 So for this, we only have to change things in our eight HTML file and don't have to worry2192.27999999999972192.2799999999997 about the CSS.2194.922194.92 So in order to add the semantic UI, we go to the official homepage and get started.2203.22203.2 And then we can go to the CDN recipes and we want to add this.2212.042212.04 So let me search this.2216.83999999999972216.8399999999997 So CDN.2219.27999999999972219.2799999999997 So there it is.2221.22221.2 So we have to grab these two things.2225.962225.96 So we want to add the a link to the style sheet and also the script.2233.322233.32 So we add this to our base HTML in our head up here.2241.962241.96 Let's copy and paste this.2245.862245.86 Now what we can do is we only have to add classes to our different tags.2252.362252.36 For example, so for this, you have to check out the official documentation.2257.16000000000032257.1600000000003 So there you can see for example, we have a header, we have a input.2265.02265.0 So for example, this is what we're using.2269.24000000000022269.2400000000002 And yeah, so check that out for yourself.2271.842271.84 So for now, I'm just showing you how this is done.2275.522275.52 So it's it's pretty straightforward.2277.982277.98 So for example, for each to do item here in our for loop, we want to add a div.2288.962288.96 And so let's grab the closing tag and put it down here.2297.442297.44 And then we give it a class.2301.442301.44 And now we have to use the classes from the semantic UI CSS.2305.362305.36 For example, here we say this is UI segments.2309.522309.52 So this is a segment.2312.20000000000032312.2000000000003 And then our p tag gets the class equals and here we say for example, this is a UI big2321.20000000000032321.2000000000003 header.2323.582323.58 Then here in our h tag, for example, we say this should be a button.2331.12000000000032331.12 So here we say this is class UI and then blue button.2339.642339.64 So this is a really nice syntax.2341.882341.88 So just like we would call it anyway.2344.882344.88 So here class equals this and then for our delete button, we use a UI red buttons.2355.79999999999972355.8 And now if we refresh this, let me quickly check if this is working already.2361.862361.86 So yeah, so our semantic UI CSS gets applied.2367.20000000000032367.2000000000003 And it's looking a little bit more nice now.2370.16000000000032370.1600000000003 So now let's continue with some styling.2373.20000000000032373.2000000000003 So now for the span, we also use a class.2377.982377.98 So here we say class equals.2381.42381.4 So if it's not completed, we say this is a gray label.2387.522387.52 And if it is completed, then we say it is a UI green label.2395.842395.84 So now let's go back and let's refresh this.2399.762399.76 This is working.2400.842400.84 If we click update, then we have a green label.2405.762405.76 And now let's also style these two things.2410.42410.4 So here we say our header equals of class, you I and then we say a center aligned header.2423.122423.12 Then for our form, we can also simply say class equals and here we say UI form, this2433.282433.28 will already make it much nicer.2435.82435.8 So now if we reload this, then our header is centered.2441.882441.88 And here we have a form.2443.72000000000032443.7200000000003 So now let's also let's add some margin to our header.2450.542450.54 So here I add a style for myself because I couldn't figure it out how we can do this2457.14000000000032457.1400000000003 with semantic AI.2458.72000000000032458.72 So here we say style equals and then margin top and let's use 50 pixels.2471.582471.58 For example, this should work.2473.95999999999962473.9599999999996 So if we go back and reload, then we see we have a margin here.2479.35999999999972479.36 Then for our form here for we have to add the class equals fields, then for our button,2491.22000000000032491.2200000000003 we also want to say class equals you I let's use a blue button.2501.12000000000032501.12 And now, if we reload this, then it looks almost as our app that I showed you in the2511.562511.56 beginning.2512.562512.56 So one more thing that is missing is a container.2517.29999999999972517.2999999999997 So we add a div here, so a div tag, and then the closing tag should be at the very bottom.2530.882530.88 So here, and this should get the class equals UI container.2541.042541.04 And now I made a mistake.2542.42542.4 So I want to have the style for the container and not for our h1 tag.2548.14000000000032548.1400000000003 So here I put the style in here.2551.16000000000032551.1600000000003 So now save it and reload this.2555.122555.12 And now we are done.2556.822556.82 So this is our final app.2559.42559.4 So yeah, so I hope you enjoyed this and now know how you can use flask to write your own2567.082567.08 web apps.2569.02569.0 And if you like this tutorial, please hit the like button and subscribe to the channel2574.122574.12 and see you next time.2575.442575.44 Bye.2603.16\"}"}